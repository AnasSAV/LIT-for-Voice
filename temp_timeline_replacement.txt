        <CardContent>
          <div className="space-y-4">
            {/* Enhanced Line Chart */}
            <div className="relative border rounded bg-white p-2">
              <svg 
                className="w-full" 
                style={{ height: `${svgHeight}px` }}
                viewBox={`0 0 100 ${svgHeight}`}
                preserveAspectRatio="none"
              >
                {/* Grid lines */}
                {[0.25, 0.5, 0.75, 1].map(fraction => (
                  <line
                    key={fraction}
                    x1="0"
                    y1={`${margin + (1 - fraction) * plotHeight}px`}
                    x2="100%"
                    y2={`${margin + (1 - fraction) * plotHeight}px`}
                    stroke="rgba(0, 0, 0, 0.1)"
                    strokeWidth="1"
                  />
                ))}
                
                {/* Mean line */}
                <line
                  x1="0"
                  y1={`${margin + (1 - normalizedMean) * plotHeight}px`}
                  x2="100%"
                  y2={`${margin + (1 - normalizedMean) * plotHeight}px`}
                  stroke="rgba(255, 165, 0, 0.6)"
                  strokeWidth="2"
                  strokeDasharray="3,3"
                />
                
                {/* Threshold line (mean + std dev) */}
                <line
                  x1="0"
                  y1={`${margin + (1 - normalizedThreshold) * plotHeight}px`}
                  x2="100%"
                  y2={`${margin + (1 - normalizedThreshold) * plotHeight}px`}
                  stroke="rgba(255, 0, 0, 0.3)"
                  strokeWidth="1"
                  strokeDasharray="5,5"
                />
                
                {/* Area fill under the line */}
                <polygon
                  fill="rgba(59, 130, 246, 0.1)"
                  points={[
                    `0,${svgHeight - margin}`,
                    ...normalizedValues.map((val, i) => 
                      `${(i / (normalizedValues.length - 1)) * 100},${margin + (1 - val) * plotHeight}`
                    ),
                    `100,${svgHeight - margin}`
                  ].join(' ')}
                />
                
                {/* Main attention line */}
                <polyline
                  fill="none"
                  stroke="rgb(59, 130, 246)"
                  strokeWidth="3"
                  points={normalizedValues.map((val, i) => 
                    `${(i / (normalizedValues.length - 1)) * 100},${margin + (1 - val) * plotHeight}`
                  ).join(' ')}
                />
                
                {/* Enhanced data points with simplified tooltips */}
                {normalizedValues.map((val, i) => {
                  const x = (i / (normalizedValues.length - 1)) * 100;
                  const y = margin + (1 - val) * plotHeight;
                  const originalVal = attentionValues[i];
                  const isHighlight = originalVal > mean + stdDev;
                  
                  return (
                    <g key={i}>
                      <circle
                        cx={`${x}%`}
                        cy={`${y}px`}
                        r={isHighlight ? "4" : "2"}
                        fill={isHighlight ? "rgb(239, 68, 68)" : "rgb(59, 130, 246)"}
                        stroke="white"
                        strokeWidth="1"
                      />
                      {/* Simplified tooltip - only show time */}
                      <title>Time: {timestamps[i].time.toFixed(2)}s</title>
                    </g>
                  );
                })}
                
                {/* Y-axis labels */}
                <text x="5" y={margin + 5} fontSize="10" fill="gray">
                  {(maxAttention * 100).toFixed(1)}%
                </text>
                <text x="5" y={svgHeight - margin - 5} fontSize="10" fill="gray">
                  {(minAttention * 100).toFixed(1)}%
                </text>
              </svg>
            </div>
            
            {/* Bar Chart View for Comparison */}
            <div className="relative border rounded bg-gray-50" style={{ height: "60px" }}>
              <svg className="w-full h-full">
                {normalizedValues.map((val, i) => {
                  const barWidth = 100 / normalizedValues.length;
                  const x = i * barWidth;
                  const height = val * 50; // 50px max height
                  const originalVal = attentionValues[i];
                  const isHighlight = originalVal > mean + stdDev;
                  
                  return (
                    <rect
                      key={i}
                      x={`${x}%`}
                      y={`${50 - height}px`}
                      width={`${barWidth * 0.8}%`}
                      height={`${height}px`}
                      fill={isHighlight ? "rgb(239, 68, 68)" : "rgb(59, 130, 246)"}
                      opacity="0.7"
                    >
                      <title>Time: {timestamps[i].time.toFixed(2)}s</title>
                    </rect>
                  );
                })}
              </svg>
            </div>
          </div>
          
          {/* Enhanced Timeline info */}
          <div className="mt-3 text-xs text-muted-foreground space-y-1">
            <div>
              Duration: {attentionData.total_duration?.toFixed(1)}s | 
              Points: {timestamps.length} | 
              Resolution: {((attentionData.total_duration || 0) / timestamps.length * 1000).toFixed(0)}ms
            </div>
            <div>
              Mean: {(mean * 100).toFixed(2)}% | 
              Range: {(range * 100).toFixed(2)}% | 
              Variability: {variance > 0 ? 'Dynamic' : 'Stable'}
            </div>
          </div>